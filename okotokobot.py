from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from apscheduler.schedulers.background import BackgroundScheduler
from zoneinfo import ZoneInfo
from datetime import datetime, timedelta, time as dtime
from dotenv import load_dotenv
from flask import Flask, request
from threading import Thread
from config import config
from db_ping import check_db
import requests
import asyncpg
import asyncio
import random
import json
import os
import atexit


load_dotenv()

STATE_FILE = "bot_state.json"

flask_app = Flask(__name__)
scheduler = BackgroundScheduler(timezone=ZoneInfo("Asia/Almaty"))
scheduler.start()

active_chats = set()
just_started_chats = set()
recent_responded = set()  # –∞–Ω—Ç–∏ –¥–∞–±–ª-–º–æ–±–ª –±–∞–≥
last_message_ids = {}
last_emoji_message_ids = {}
user_hint_requests = {}
next_random_push = {}

TEMP_CONFIG_FILE = f"temp_config_{config['DB']['schema']}.json"
temp_config = {}


# –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
def load_state():
    if not os.path.exists(STATE_FILE):
        return

    with open(STATE_FILE, "r") as f:
        state = json.load(f)

    active_chats.update(int(cid) for cid in state.get("active_chats", []))

    for cid, time_str in state.get("next_random_push", {}).items():
        next_random_push[int(cid)] = datetime.fromisoformat(time_str)

    for cid, data in state.get("user_hint_requests", {}).items():
        user_hint_requests[int(cid)] = {
            "time": datetime.fromisoformat(data["time"]),
            "count": data["count"]
        }


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
def save_state():
    state = {
        "active_chats": list(active_chats),
        "next_random_push": {str(k): v.isoformat() for k, v in next_random_push.items()},
        "user_hint_requests": {str(k): {
            "time": v["time"].isoformat(),
            "count": v["count"]
        } for k, v in user_hint_requests.items()}
    }
    with open(STATE_FILE, "w") as f:
        json.dump(state, f)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ë–î
async def refresh_temp_config():
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ temp_config –∏–∑ –±–∞–∑—ã...")
    db = config["DB"]
    conn = await asyncpg.connect(
        host=db["host"],
        port=db["port"],
        user=db["user"],
        password=db["password"],
        database=db["name"]
    )
    await conn.execute(f"SET search_path TO {db['schema']}")

    # –¢—Ä–∞–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è json –≤ —Ç–µ–∫—Å—Ç, —É–±–µ—Ä–∞—è –∫–æ–≤—ã—á–∫–∏
    rows = await conn.fetch("SELECT tag, message::text AS message FROM messages")
    await conn.close()

    data = {}
    for row in rows:
        tag = row["tag"]
        raw_value = row["message"]

        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏
            value = json.loads(raw_value)
        except Exception:
            value = raw_value  # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å

        data[tag] = value

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–µ–≥–æ–≤ –∏–∑ –±–∞–∑—ã")

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open(TEMP_CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    global temp_config
    temp_config = data
    print("‚úÖ temp_config –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
def load_temp_config():
    global temp_config
    if os.path.exists(TEMP_CONFIG_FILE):
        try:
            with open(TEMP_CONFIG_FILE, "r", encoding="utf-8") as f:
                temp_config = json.load(f)
            print("üì¶ temp_config –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ temp_config: {e}")
            temp_config = {}
    else:
        print("‚ö†Ô∏è temp_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@flask_app.route("/ping")
def ping():
    real_ip = request.headers.get("X-Forwarded-For", request.remote_addr)
    user_agent = request.headers.get("User-Agent", "Unknown")

    print(f"[PING] IP: {real_ip} | UA: {user_agent}")
    return "OK", 200

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    flask_app.run(host="0.0.0.0", port=port)

# –ë–î –ø–∏–Ω–≥
@flask_app.route("/db-ping")
def db_ping_endpoint():
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(check_db())
        if result:
            return "DB OK", 200
        else:
            return "DB ERROR", 500
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /db-ping: {e}")
        return "Internal Error", 500


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
def get_quote():
    url = "http://api.forismatic.com/api/1.0/"
    params = {"method": "getQuote", "format": "json", "lang": "ru"}
    try:
        response = requests.post(url, data=params, timeout=5)
        if response.status_code == 200:
            return response.json().get("quoteText", "–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã."
    except:
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API."


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ "–≤—Ä–µ–º–µ–Ω–∏ –º–æ–º–µ–Ω—Ç–∞" (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
def generate_next_random_time(from_date=None):
    if not from_date:
        from_date = datetime.now()

    days_ahead = random.randint(7, 13)  # –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    random_day = from_date + timedelta(days=days_ahead)

    hour = random.randint(9, 22)
    minute = random.randint(0, 59)

    return datetime.combine(random_day.date(), dtime(hour, minute))


# –í—ã–∑–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞
async def get_message(tag: str):
    return temp_config.get(tag)

# –ü–∞—Ä—Å–∏–Ω–≥
async def get_json(tag: str):
    raw = await get_message(tag)
    if raw is None:
        return []

    if isinstance(raw, str):
        try:
            return json.loads(raw)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON {tag}: {e}")
            return []

    return raw  # –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ list –∏–ª–∏ dict



# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É "–≤—Ä–µ–º—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞"
async def check_random_quotes(app):
    now = datetime.now()
    for chat_id in list(active_chats):
        scheduled = next_random_push.get(chat_id)

        # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
        if not scheduled:
            next_random_push[chat_id] = generate_next_random_time(from_date=now)
            continue

        # –µ—Å–ª–∏ –ø–æ—Ä–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if now >= scheduled:
            quote = get_quote()

            try:
                await app.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
                delay = min(len(quote) * 0.05, 5)
                await asyncio.sleep(delay)

                await app.bot.send_message(chat_id=chat_id, text=quote)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã: {e}")

            # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
            next_random_push[chat_id] = generate_next_random_time()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def eye_response(update: Update, context):
    chat_id = update.effective_chat.id
    text = update.message.text.lower()

    if text.strip() == "/start":
        return

    if chat_id in recent_responded:
        return

    recent_responded.add(chat_id)

    async def clear_flag():
        await asyncio.sleep(2)
        recent_responded.discard(chat_id)

    asyncio.create_task(clear_flag())

    if chat_id not in active_chats:
        active_chats.add(chat_id)
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(2)
        msg = await get_message("first_start")
        if isinstance(msg, str):
            await update.message.reply_text(msg)
        return

    keywords = await get_json("keywords")
    if any(word in text for word in keywords):
        now = datetime.now()
        hint_data = user_hint_requests.get(chat_id)

        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –∏–ª–∏ —á–∞—Å –ø—Ä–æ—à—ë–ª
        if not hint_data or now - hint_data["time"] > timedelta(hours=1):
            user_hint_requests[chat_id] = {"time": now, "count": 1}
            quote = get_quote()

            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            delay = min(len(quote) * 0.05, 5)
            await asyncio.sleep(delay)

            msg = await update.message.reply_text(quote)
            last_message_ids[chat_id] = msg.message_id
            return

        elif hint_data["count"] == 1:
            user_hint_requests[chat_id]["count"] += 1

            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(2)

            response = await get_message("second_response")
            if isinstance(response, str):
                msg = await update.message.reply_text(response)
                last_message_ids[chat_id] = msg.message_id
            return

        else:
            # count >= 2 ‚Äî —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
            emojis = await get_json("emojis")
            if emojis:
                emoji = random.choice(emojis)

                # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π —ç–º–æ–¥–∑–∏
                if chat_id in last_emoji_message_ids:
                    try:
                        await context.bot.delete_message(chat_id=chat_id, message_id=last_emoji_message_ids[chat_id])
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∑–∏: {e}")

                try:
                    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
                    await asyncio.sleep(1)

                    msg = await update.message.reply_text(emoji)
                    last_emoji_message_ids[chat_id] = msg.message_id
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏: {e}")
            return

    # –µ—Å–ª–∏ –Ω–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –Ω–∏ /start ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —ç–º–æ–¥–∑–∏
    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –±—ã–ª
    if chat_id in last_emoji_message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_emoji_message_ids[chat_id])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∑–∏: {e}")

    emojis = await get_json("emojis")
    if emojis:
        emoji = random.choice(emojis)
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(1)

            msg = await update.message.reply_text(emoji)
            last_emoji_message_ids[chat_id] = msg.message_id
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏: {e}")



# /start
async def start(update: Update, context):
    chat_id = update.effective_chat.id
    just_started_chats.add(chat_id)
    async def clear_just_started():
        await asyncio.sleep(3)
        just_started_chats.discard(chat_id)
    asyncio.create_task(clear_just_started())

    if chat_id in active_chats:
        msg = await get_message("repeated_start")
    else:
        active_chats.add(chat_id)
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(2)
        msg = await get_message("first_start")

    if isinstance(msg, str):
            await update.message.reply_text(msg)

# /help
async def help_command(update: Update, context):
    msg = await get_message("help_response")
    if isinstance(msg, str):
        await update.message.reply_text(msg)


# /stop
async def stop(update: Update, context):
    chat_id = update.effective_chat.id
    if chat_id in active_chats:
        active_chats.remove(chat_id)
        msg = await get_message("stop_response")
    else:
        msg = await get_message("repeated_stop")

    if isinstance(msg, str):
        await update.message.reply_text(msg)


# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
def setup_schedulers(app, loop):
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(check_random_quotes(app), loop), "interval", minutes=1)
    scheduler.add_job(save_state, "interval", minutes=10)
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(refresh_temp_config(), loop), "interval", minutes=60)

        

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Application.builder().token(config["TOKEN"]).build()

loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

load_state()
print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")

atexit.register(save_state)
print("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")

load_temp_config()
asyncio.run(refresh_temp_config())



# Schedulers - - - - - - - - - - -
setup_schedulers(app, loop)


# Heandlers - - - - - - - - - - - -
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("stop", stop))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), eye_response, block=False))

if __name__ == "__main__":
    # 1. –ó–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ event loop (–¥–ª—è Py 3.10+)
    import sys
    if sys.version_info >= (3, 10):
        asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()



